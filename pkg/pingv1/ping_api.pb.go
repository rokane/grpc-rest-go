// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ping_api.proto

package pingv1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// PingRequest contains no information
type PingRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingRequest) Reset()         { *m = PingRequest{} }
func (m *PingRequest) String() string { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()    {}
func (*PingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31d8fe8f48d51168, []int{0}
}

func (m *PingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingRequest.Unmarshal(m, b)
}
func (m *PingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingRequest.Marshal(b, m, deterministic)
}
func (m *PingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingRequest.Merge(m, src)
}
func (m *PingRequest) XXX_Size() int {
	return xxx_messageInfo_PingRequest.Size(m)
}
func (m *PingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingRequest proto.InternalMessageInfo

// PingResponse contains a message sent from the server
type PingResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingResponse) Reset()         { *m = PingResponse{} }
func (m *PingResponse) String() string { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()    {}
func (*PingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31d8fe8f48d51168, []int{1}
}

func (m *PingResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingResponse.Unmarshal(m, b)
}
func (m *PingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingResponse.Marshal(b, m, deterministic)
}
func (m *PingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingResponse.Merge(m, src)
}
func (m *PingResponse) XXX_Size() int {
	return xxx_messageInfo_PingResponse.Size(m)
}
func (m *PingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PingResponse proto.InternalMessageInfo

func (m *PingResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// PingStreamRequest contains details of the streaming request sent from the
// client
type PingStreamRequest struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingStreamRequest) Reset()         { *m = PingStreamRequest{} }
func (m *PingStreamRequest) String() string { return proto.CompactTextString(m) }
func (*PingStreamRequest) ProtoMessage()    {}
func (*PingStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31d8fe8f48d51168, []int{2}
}

func (m *PingStreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingStreamRequest.Unmarshal(m, b)
}
func (m *PingStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingStreamRequest.Marshal(b, m, deterministic)
}
func (m *PingStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingStreamRequest.Merge(m, src)
}
func (m *PingStreamRequest) XXX_Size() int {
	return xxx_messageInfo_PingStreamRequest.Size(m)
}
func (m *PingStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingStreamRequest proto.InternalMessageInfo

func (m *PingStreamRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PingStreamRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// PingStreamResponse contains information about the request processed.
type PingStreamResponse struct {
	Count                int32    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingStreamResponse) Reset()         { *m = PingStreamResponse{} }
func (m *PingStreamResponse) String() string { return proto.CompactTextString(m) }
func (*PingStreamResponse) ProtoMessage()    {}
func (*PingStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31d8fe8f48d51168, []int{3}
}

func (m *PingStreamResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingStreamResponse.Unmarshal(m, b)
}
func (m *PingStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingStreamResponse.Marshal(b, m, deterministic)
}
func (m *PingStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingStreamResponse.Merge(m, src)
}
func (m *PingStreamResponse) XXX_Size() int {
	return xxx_messageInfo_PingStreamResponse.Size(m)
}
func (m *PingStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PingStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PingStreamResponse proto.InternalMessageInfo

func (m *PingStreamResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// PongStreamRequest contains a count telling the server how many responses
// to stream, and a message to stream back
type PongStreamRequest struct {
	Count                int32    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PongStreamRequest) Reset()         { *m = PongStreamRequest{} }
func (m *PongStreamRequest) String() string { return proto.CompactTextString(m) }
func (*PongStreamRequest) ProtoMessage()    {}
func (*PongStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31d8fe8f48d51168, []int{4}
}

func (m *PongStreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PongStreamRequest.Unmarshal(m, b)
}
func (m *PongStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PongStreamRequest.Marshal(b, m, deterministic)
}
func (m *PongStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PongStreamRequest.Merge(m, src)
}
func (m *PongStreamRequest) XXX_Size() int {
	return xxx_messageInfo_PongStreamRequest.Size(m)
}
func (m *PongStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PongStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PongStreamRequest proto.InternalMessageInfo

func (m *PongStreamRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *PongStreamRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// PongStreamResponse contains details of the streaming response.
type PongStreamResponse struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PongStreamResponse) Reset()         { *m = PongStreamResponse{} }
func (m *PongStreamResponse) String() string { return proto.CompactTextString(m) }
func (*PongStreamResponse) ProtoMessage()    {}
func (*PongStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31d8fe8f48d51168, []int{5}
}

func (m *PongStreamResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PongStreamResponse.Unmarshal(m, b)
}
func (m *PongStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PongStreamResponse.Marshal(b, m, deterministic)
}
func (m *PongStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PongStreamResponse.Merge(m, src)
}
func (m *PongStreamResponse) XXX_Size() int {
	return xxx_messageInfo_PongStreamResponse.Size(m)
}
func (m *PongStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PongStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PongStreamResponse proto.InternalMessageInfo

func (m *PongStreamResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PongStreamResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// PingPongRequest contains details of a streaming request sent from the
// client.
type PingPongRequest struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingPongRequest) Reset()         { *m = PingPongRequest{} }
func (m *PingPongRequest) String() string { return proto.CompactTextString(m) }
func (*PingPongRequest) ProtoMessage()    {}
func (*PingPongRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31d8fe8f48d51168, []int{6}
}

func (m *PingPongRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingPongRequest.Unmarshal(m, b)
}
func (m *PingPongRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingPongRequest.Marshal(b, m, deterministic)
}
func (m *PingPongRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingPongRequest.Merge(m, src)
}
func (m *PingPongRequest) XXX_Size() int {
	return xxx_messageInfo_PingPongRequest.Size(m)
}
func (m *PingPongRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingPongRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingPongRequest proto.InternalMessageInfo

func (m *PingPongRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PingPongRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// PingPongResponse contains details of a streaming response sent from the
// server.
type PingPongResponse struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingPongResponse) Reset()         { *m = PingPongResponse{} }
func (m *PingPongResponse) String() string { return proto.CompactTextString(m) }
func (*PingPongResponse) ProtoMessage()    {}
func (*PingPongResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31d8fe8f48d51168, []int{7}
}

func (m *PingPongResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingPongResponse.Unmarshal(m, b)
}
func (m *PingPongResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingPongResponse.Marshal(b, m, deterministic)
}
func (m *PingPongResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingPongResponse.Merge(m, src)
}
func (m *PingPongResponse) XXX_Size() int {
	return xxx_messageInfo_PingPongResponse.Size(m)
}
func (m *PingPongResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PingPongResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PingPongResponse proto.InternalMessageInfo

func (m *PingPongResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PingPongResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*PingRequest)(nil), "pingpong.v1.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "pingpong.v1.PingResponse")
	proto.RegisterType((*PingStreamRequest)(nil), "pingpong.v1.PingStreamRequest")
	proto.RegisterType((*PingStreamResponse)(nil), "pingpong.v1.PingStreamResponse")
	proto.RegisterType((*PongStreamRequest)(nil), "pingpong.v1.PongStreamRequest")
	proto.RegisterType((*PongStreamResponse)(nil), "pingpong.v1.PongStreamResponse")
	proto.RegisterType((*PingPongRequest)(nil), "pingpong.v1.PingPongRequest")
	proto.RegisterType((*PingPongResponse)(nil), "pingpong.v1.PingPongResponse")
}

func init() { proto.RegisterFile("ping_api.proto", fileDescriptor_31d8fe8f48d51168) }

var fileDescriptor_31d8fe8f48d51168 = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x4d, 0x4e, 0xe3, 0x40,
	0x10, 0x85, 0xd5, 0x9e, 0x49, 0x32, 0x53, 0x99, 0xc9, 0x4f, 0x4f, 0x16, 0x1e, 0x2b, 0x93, 0x41,
	0x5e, 0x59, 0x59, 0xd8, 0x31, 0x2c, 0x90, 0xf8, 0x93, 0x08, 0x2b, 0x16, 0x48, 0x56, 0x90, 0xb2,
	0x40, 0x48, 0xc8, 0x24, 0x2d, 0xcb, 0x82, 0x74, 0x39, 0xb6, 0xe3, 0x03, 0x70, 0x05, 0xce, 0xc0,
	0x86, 0xa3, 0xb0, 0xe5, 0x0a, 0x1c, 0x04, 0x75, 0xdb, 0x56, 0x1c, 0x92, 0x10, 0xb2, 0xeb, 0x72,
	0xbf, 0x57, 0x5f, 0x75, 0x3d, 0x19, 0x6a, 0x81, 0xcf, 0xbd, 0x1b, 0x37, 0xf0, 0xcd, 0x20, 0xc4,
	0x18, 0x69, 0x55, 0xd4, 0x01, 0x72, 0xcf, 0x4c, 0x6c, 0xad, 0xed, 0x21, 0x7a, 0xf7, 0xcc, 0x72,
	0x03, 0xdf, 0x72, 0x39, 0xc7, 0xd8, 0x8d, 0x7d, 0xe4, 0x51, 0x2a, 0xd5, 0x7f, 0x43, 0xd5, 0xf1,
	0xb9, 0x37, 0x60, 0xd3, 0x19, 0x8b, 0x62, 0xdd, 0x80, 0x5f, 0x69, 0x19, 0x05, 0xc8, 0x23, 0x46,
	0x55, 0xa8, 0x4c, 0x58, 0x14, 0xb9, 0x1e, 0x53, 0xc9, 0x0e, 0x31, 0x7e, 0x0e, 0xf2, 0x52, 0x3f,
	0x86, 0xa6, 0x50, 0x5e, 0xc6, 0x21, 0x73, 0x27, 0x99, 0x9d, 0xd6, 0x40, 0xf1, 0xc7, 0x52, 0x59,
	0x1a, 0x28, 0xfe, 0xb8, 0x68, 0x57, 0x16, 0xed, 0x5d, 0xa0, 0x45, 0x7b, 0x86, 0x6b, 0x41, 0x69,
	0x84, 0x33, 0x1e, 0x67, 0x2d, 0xd2, 0x42, 0x3f, 0x83, 0xa6, 0x83, 0x1f, 0x51, 0x2b, 0xa5, 0x9f,
	0x00, 0x4f, 0x80, 0x16, 0x9b, 0x64, 0xc0, 0xaf, 0x0f, 0x7c, 0x08, 0x75, 0x31, 0xb0, 0xe8, 0xb1,
	0xfd, 0x6b, 0x8f, 0xa0, 0x31, 0x37, 0x6f, 0x8b, 0xde, 0x7d, 0xfa, 0x06, 0x15, 0x61, 0x3f, 0x75,
	0xce, 0xe9, 0x05, 0x7c, 0x17, 0x47, 0xaa, 0x9a, 0x85, 0x8c, 0xcd, 0x42, 0x84, 0xda, 0xdf, 0x15,
	0x37, 0x29, 0x52, 0x6f, 0x3c, 0xbc, 0xbe, 0x3d, 0x2a, 0x40, 0x7f, 0x58, 0x89, 0x6d, 0x09, 0x15,
	0xbd, 0x03, 0x98, 0xc7, 0x40, 0x3b, 0x4b, 0xd6, 0x85, 0x9d, 0x6b, 0xff, 0xd7, 0xde, 0x67, 0x00,
	0x4d, 0x02, 0x5a, 0x7a, 0x3d, 0x07, 0x58, 0x91, 0x14, 0x1c, 0x90, 0xae, 0x41, 0x24, 0x0c, 0xd7,
	0xc1, 0x70, 0x03, 0x0c, 0x37, 0xc0, 0xb0, 0x08, 0xeb, 0x11, 0x3a, 0x85, 0x5a, 0xbe, 0xf2, 0x0c,
	0xd8, 0x5e, 0x9a, 0xbe, 0x10, 0xa6, 0xf6, 0x6f, 0xcd, 0x6d, 0x06, 0xeb, 0x48, 0x98, 0xaa, 0xff,
	0xc9, 0x5f, 0xb6, 0x08, 0x34, 0x48, 0x8f, 0xf4, 0xf7, 0xa1, 0x3a, 0xc2, 0x89, 0xec, 0x63, 0x26,
	0x76, 0x3f, 0xdd, 0x2c, 0x0b, 0x13, 0x16, 0x3a, 0xe4, 0xaa, 0x2c, 0x3e, 0x27, 0xf6, 0xb3, 0x22,
	0xa3, 0x34, 0x87, 0xf6, 0x4b, 0x7a, 0xba, 0x1e, 0xda, 0xb7, 0x65, 0xf9, 0x2f, 0xee, 0xbd, 0x07,
	0x00, 0x00, 0xff, 0xff, 0x05, 0x14, 0x9f, 0xda, 0xc8, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PingAPIClient is the client API for PingAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PingAPIClient interface {
	// Ping is a simple request which returns a simple response
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// PingStream accepts a stream of requests, and will return a response
	// containing a count of the requests processed.
	PingStream(ctx context.Context, opts ...grpc.CallOption) (PingAPI_PingStreamClient, error)
	// PongStream accepts a request stating how many requests to stream back.
	// It will response with a stream until the count is reached and close the
	// connection.
	PongStream(ctx context.Context, in *PongStreamRequest, opts ...grpc.CallOption) (PingAPI_PongStreamClient, error)
	// PingPongStream demonstrates a bidirectional stream where requests are
	// streamed both from the client and the server.
	PingPongStream(ctx context.Context, opts ...grpc.CallOption) (PingAPI_PingPongStreamClient, error)
}

type pingAPIClient struct {
	cc *grpc.ClientConn
}

func NewPingAPIClient(cc *grpc.ClientConn) PingAPIClient {
	return &pingAPIClient{cc}
}

func (c *pingAPIClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/pingpong.v1.PingAPI/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingAPIClient) PingStream(ctx context.Context, opts ...grpc.CallOption) (PingAPI_PingStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PingAPI_serviceDesc.Streams[0], "/pingpong.v1.PingAPI/PingStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingAPIPingStreamClient{stream}
	return x, nil
}

type PingAPI_PingStreamClient interface {
	Send(*PingStreamRequest) error
	CloseAndRecv() (*PingStreamResponse, error)
	grpc.ClientStream
}

type pingAPIPingStreamClient struct {
	grpc.ClientStream
}

func (x *pingAPIPingStreamClient) Send(m *PingStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pingAPIPingStreamClient) CloseAndRecv() (*PingStreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PingStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pingAPIClient) PongStream(ctx context.Context, in *PongStreamRequest, opts ...grpc.CallOption) (PingAPI_PongStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PingAPI_serviceDesc.Streams[1], "/pingpong.v1.PingAPI/PongStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingAPIPongStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PingAPI_PongStreamClient interface {
	Recv() (*PongStreamResponse, error)
	grpc.ClientStream
}

type pingAPIPongStreamClient struct {
	grpc.ClientStream
}

func (x *pingAPIPongStreamClient) Recv() (*PongStreamResponse, error) {
	m := new(PongStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pingAPIClient) PingPongStream(ctx context.Context, opts ...grpc.CallOption) (PingAPI_PingPongStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PingAPI_serviceDesc.Streams[2], "/pingpong.v1.PingAPI/PingPongStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingAPIPingPongStreamClient{stream}
	return x, nil
}

type PingAPI_PingPongStreamClient interface {
	Send(*PingPongRequest) error
	Recv() (*PingPongResponse, error)
	grpc.ClientStream
}

type pingAPIPingPongStreamClient struct {
	grpc.ClientStream
}

func (x *pingAPIPingPongStreamClient) Send(m *PingPongRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pingAPIPingPongStreamClient) Recv() (*PingPongResponse, error) {
	m := new(PingPongResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PingAPIServer is the server API for PingAPI service.
type PingAPIServer interface {
	// Ping is a simple request which returns a simple response
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// PingStream accepts a stream of requests, and will return a response
	// containing a count of the requests processed.
	PingStream(PingAPI_PingStreamServer) error
	// PongStream accepts a request stating how many requests to stream back.
	// It will response with a stream until the count is reached and close the
	// connection.
	PongStream(*PongStreamRequest, PingAPI_PongStreamServer) error
	// PingPongStream demonstrates a bidirectional stream where requests are
	// streamed both from the client and the server.
	PingPongStream(PingAPI_PingPongStreamServer) error
}

// UnimplementedPingAPIServer can be embedded to have forward compatible implementations.
type UnimplementedPingAPIServer struct {
}

func (*UnimplementedPingAPIServer) Ping(ctx context.Context, req *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedPingAPIServer) PingStream(srv PingAPI_PingStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PingStream not implemented")
}
func (*UnimplementedPingAPIServer) PongStream(req *PongStreamRequest, srv PingAPI_PongStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PongStream not implemented")
}
func (*UnimplementedPingAPIServer) PingPongStream(srv PingAPI_PingPongStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PingPongStream not implemented")
}

func RegisterPingAPIServer(s *grpc.Server, srv PingAPIServer) {
	s.RegisterService(&_PingAPI_serviceDesc, srv)
}

func _PingAPI_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingAPIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pingpong.v1.PingAPI/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingAPIServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PingAPI_PingStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PingAPIServer).PingStream(&pingAPIPingStreamServer{stream})
}

type PingAPI_PingStreamServer interface {
	SendAndClose(*PingStreamResponse) error
	Recv() (*PingStreamRequest, error)
	grpc.ServerStream
}

type pingAPIPingStreamServer struct {
	grpc.ServerStream
}

func (x *pingAPIPingStreamServer) SendAndClose(m *PingStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pingAPIPingStreamServer) Recv() (*PingStreamRequest, error) {
	m := new(PingStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PingAPI_PongStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PongStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PingAPIServer).PongStream(m, &pingAPIPongStreamServer{stream})
}

type PingAPI_PongStreamServer interface {
	Send(*PongStreamResponse) error
	grpc.ServerStream
}

type pingAPIPongStreamServer struct {
	grpc.ServerStream
}

func (x *pingAPIPongStreamServer) Send(m *PongStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PingAPI_PingPongStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PingAPIServer).PingPongStream(&pingAPIPingPongStreamServer{stream})
}

type PingAPI_PingPongStreamServer interface {
	Send(*PingPongResponse) error
	Recv() (*PingPongRequest, error)
	grpc.ServerStream
}

type pingAPIPingPongStreamServer struct {
	grpc.ServerStream
}

func (x *pingAPIPingPongStreamServer) Send(m *PingPongResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pingAPIPingPongStreamServer) Recv() (*PingPongRequest, error) {
	m := new(PingPongRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PingAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pingpong.v1.PingAPI",
	HandlerType: (*PingAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _PingAPI_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PingStream",
			Handler:       _PingAPI_PingStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PongStream",
			Handler:       _PingAPI_PongStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PingPongStream",
			Handler:       _PingAPI_PingPongStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ping_api.proto",
}
